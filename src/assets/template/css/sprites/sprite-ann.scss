// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$clock-gray-name: 'clock-gray';
$clock-gray-x: 0px;
$clock-gray-y: 0px;
$clock-gray-offset-x: 0px;
$clock-gray-offset-y: 0px;
$clock-gray-width: 36px;
$clock-gray-height: 35px;
$clock-gray-total-width: 73px;
$clock-gray-total-height: 52px;
$clock-gray-image: '/assets/template/css/sprites/sprite-ann.png';
$clock-gray: (0px, 0px, 0px, 0px, 36px, 35px, 73px, 52px, '/assets/template/css/sprites/sprite-ann.png', 'clock-gray', );
$crumbs-dot-name: 'crumbs-dot';
$crumbs-dot-x: 62px;
$crumbs-dot-y: 17px;
$crumbs-dot-offset-x: -62px;
$crumbs-dot-offset-y: -17px;
$crumbs-dot-width: 4px;
$crumbs-dot-height: 4px;
$crumbs-dot-total-width: 73px;
$crumbs-dot-total-height: 52px;
$crumbs-dot-image: '/assets/template/css/sprites/sprite-ann.png';
$crumbs-dot: (62px, 17px, -62px, -17px, 4px, 4px, 73px, 52px, '/assets/template/css/sprites/sprite-ann.png', 'crumbs-dot', );
$location-name: 'location';
$location-x: 62px;
$location-y: 0px;
$location-offset-x: -62px;
$location-offset-y: 0px;
$location-width: 11px;
$location-height: 17px;
$location-total-width: 73px;
$location-total-height: 52px;
$location-image: '/assets/template/css/sprites/sprite-ann.png';
$location: (62px, 0px, -62px, 0px, 11px, 17px, 73px, 52px, '/assets/template/css/sprites/sprite-ann.png', 'location', );
$phone-name: 'phone';
$phone-x: 16px;
$phone-y: 35px;
$phone-offset-x: -16px;
$phone-offset-y: -35px;
$phone-width: 15px;
$phone-height: 16px;
$phone-total-width: 73px;
$phone-total-height: 52px;
$phone-image: '/assets/template/css/sprites/sprite-ann.png';
$phone: (16px, 35px, -16px, -35px, 15px, 16px, 73px, 52px, '/assets/template/css/sprites/sprite-ann.png', 'phone', );
$rub-gray-name: 'rub-gray';
$rub-gray-x: 36px;
$rub-gray-y: 0px;
$rub-gray-offset-x: -36px;
$rub-gray-offset-y: 0px;
$rub-gray-width: 26px;
$rub-gray-height: 35px;
$rub-gray-total-width: 73px;
$rub-gray-total-height: 52px;
$rub-gray-image: '/assets/template/css/sprites/sprite-ann.png';
$rub-gray: (36px, 0px, -36px, 0px, 26px, 35px, 73px, 52px, '/assets/template/css/sprites/sprite-ann.png', 'rub-gray', );
$time-name: 'time';
$time-x: 0px;
$time-y: 35px;
$time-offset-x: 0px;
$time-offset-y: -35px;
$time-width: 16px;
$time-height: 17px;
$time-total-width: 73px;
$time-total-height: 52px;
$time-image: '/assets/template/css/sprites/sprite-ann.png';
$time: (0px, 35px, 0px, -35px, 16px, 17px, 73px, 52px, '/assets/template/css/sprites/sprite-ann.png', 'time', );
$spritesheet-width: 73px;
$spritesheet-height: 52px;
$spritesheet-image: '/assets/template/css/sprites/sprite-ann.png';
$spritesheet-sprites: ($clock-gray, $crumbs-dot, $location, $phone, $rub-gray, $time, );
$spritesheet: (73px, 52px, '/assets/template/css/sprites/sprite-ann.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
